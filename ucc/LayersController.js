// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Layer, LayersController, Vec3, rayBoxIntersection;

  Layer = require('./Layer');
  Vec3 = require('pex/geom').Vec3;
  rayBoxIntersection = function(ray, bbox, t0, t1) {
    var tmax, tmin, tymax, tymin, tzmax, tzmin;

    tmin = 0;
    tmax = 0;
    tymin = 0;
    tymax = 0;
    tzmin = 0;
    tzmax = 0;
    if (ray.direction.x >= 0) {
      tmin = (bbox.min.x - ray.origin.x) / ray.direction.x;
      tmax = (bbox.max.x - ray.origin.x) / ray.direction.x;
    } else {
      tmin = (bbox.max.x - ray.origin.x) / ray.direction.x;
      tmax = (bbox.min.x - ray.origin.x) / ray.direction.x;
    }
    if (ray.direction.y >= 0) {
      tymin = (bbox.min.y - ray.origin.y) / ray.direction.y;
      tymax = (bbox.max.y - ray.origin.y) / ray.direction.y;
    } else {
      tymin = (bbox.max.y - ray.origin.y) / ray.direction.y;
      tymax = (bbox.min.y - ray.origin.y) / ray.direction.y;
    }
    if ((tmin > tymax) || (tymin > tmax)) {
      return 0;
    }
    if (tymin > tmin) {
      tmin = tymin;
    }
    if (tymax < tmax) {
      tmax = tymax;
    }
    if (ray.direction.z >= 0) {
      tzmin = (bbox.min.z - ray.origin.z) / ray.direction.z;
      tzmax = (bbox.max.z - ray.origin.z) / ray.direction.z;
    } else {
      tzmin = (bbox.max.z - ray.origin.z) / ray.direction.z;
      tzmax = (bbox.min.z - ray.origin.z) / ray.direction.z;
    }
    if ((tmin > tzmax) || (tzmin > tmax)) {
      return 1;
    }
    if (tzmin > tmin) {
      tmin = tzmin;
    }
    if (tzmax < tmax) {
      tmax = tzmax;
    }
    if (tmin > 0 && tmax > 0) {
      return 2;
    }
    return -2;
  };
  return LayersController = (function() {
    function LayersController(window, scene, camera) {
      var _this = this;

      this.window = window;
      this.scene = scene;
      this.camera = camera;
      this.up = new Vec3(0, 1, 0);
      this.selectedLayer = null;
      this.window.on('mouseMoved', function(e) {
        return _this.testHit(e);
      });
    }

    LayersController.prototype.testHit = function(e) {
      var hitLayers, ray,
        _this = this;

      ray = this.camera.getWorldRay(e.x, e.y, this.window.width, this.window.height);
      hitLayers = [];
      this.scene.drawables.forEach(function(drawable) {
        var bbox, hit, hits;

        if (drawable instanceof Layer) {
          if (drawable.enabled === false) {
            return;
          }
          drawable.selected = false;
          hits = ray.hitTestPlane(drawable.position, _this.up);
          if (hits.length > 0) {
            hit = hits[0];
            bbox = drawable.planeMesh.getBoundingBox();
            if (hit.x >= bbox.min.x && hit.x <= bbox.max.x && hit.z >= bbox.min.z && hit.z <= bbox.max.z) {
              return hitLayers.push(drawable);
            }
          }
        }
      });
      if (hitLayers.length > 0) {
        hitLayers.sort(function(a, b) {
          return -(a.position.y - b.position.y);
        });
        this.selectedLayer = hitLayers[0];
        return this.selectedLayer.selected = true;
      } else {
        return this.selectedLayer = null;
      }
    };

    return LayersController;

  })();
});
