// Generated by CoffeeScript 1.6.2
var Arcball, Color, Cube, GUI, MathUtils, Mesh, OrthographicCamera, PerspectiveCamera, Scene, Test, Vec3, pex, _ref;

pex = pex || require('./lib/pex');

_ref = pex.scene, Scene = _ref.Scene, PerspectiveCamera = _ref.PerspectiveCamera, OrthographicCamera = _ref.OrthographicCamera, Arcball = _ref.Arcball;

Mesh = pex.gl.Mesh;

Vec3 = pex.geom.Vec3;

Cube = pex.geom.gen.Cube;

Test = pex.materials.Test;

Color = pex.color.Color;

MathUtils = pex.utils.MathUtils;

GUI = pex.gui.GUI;

pex.require(['utils/GLX', 'ucc/Layer', 'ucc/LayersController'], function(GLX, Layer, LayersController) {
  return pex.sys.Window.create({
    settings: {
      width: 1280,
      height: 720,
      fullscreen: pex.sys.Platform.isBrowser
    },
    layerDistance: 0.1,
    xray: false,
    init: function() {
      var _this = this;

      this.camera = new PerspectiveCamera(60, this.width / this.height, 0.1, 100, new Vec3(0, 1, 0), new Vec3(0, 0, 0), new Vec3(0, 0, -1));
      this.scene = new Scene();
      this.gui = new GUI(this);
      this.gui.addLabel('x - xray mode');
      MathUtils.seed(0);
      this.layers = [
        {
          img: 'assets/satellite.jpg',
          level: -1,
          enabled: false
        }, {
          img: 'assets/A0-plan.png',
          level: 0,
          enabled: true
        }, {
          img: 'assets/A1-plan.png',
          level: 1,
          enabled: true
        }, {
          img: 'assets/B0-plan.png',
          level: 0,
          enabled: true
        }, {
          img: 'assets/B1-plan.png',
          level: 1,
          enabled: true
        }, {
          img: 'assets/C0-plan.png',
          level: 0,
          enabled: true
        }, {
          img: 'assets/C1-plan.png',
          level: 1,
          enabled: true
        }, {
          img: 'assets/C2-plan.png',
          level: 2,
          enabled: true
        }
      ];
      this.layers = this.layers.map(function(layerData) {
        var layer;

        layer = new Layer(layerData.img);
        layer.position = new Vec3(Math.random() * 0.5 - 0.25, -0.02 + layerData.level * _this.layerDistance, Math.random() * 0.5 - 0.25);
        layer.rotationAngle = 0;
        layer.name = layerData.img;
        layer.level = layerData.level;
        layer.enabled = layerData.enabled;
        _this.scene.add(layer);
        return layer;
      });
      this.layersController = new LayersController(this, this.scene, this.camera);
      this.layersController.enabled = false;
      this.arcball = new Arcball(this, this.camera);
      this.glx = new GLX(this.gl);
      return this.on('keyDown', function(e) {
        var drawable, _i, _len, _ref1, _results;

        switch (e.str) {
          case 'x':
            _this.xray = !_this.xray;
            _ref1 = _this.scene.drawables;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              drawable = _ref1[_i];
              _results.push(drawable.planeMesh.material.uniforms.xray = _this.xray);
            }
            return _results;
        }
      });
    },
    draw: function() {
      this.glx.enableDepthWriteAndRead(true, true).clearColorAndDepth(Color.Black);
      this.layers[0].enabled = !this.xray;
      if (this.xray) {
        this.layers[0].border.draw(this.camera);
      }
      this.gl.enable(this.gl.BLEND);
      this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
      this.scene.draw(this.camera);
      return this.gui.draw();
    }
  });
});
