// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Panner, Vec2, Vec3, _ref;

  _ref = require('pex/geom'), Vec2 = _ref.Vec2, Vec3 = _ref.Vec3;
  return Panner = (function() {
    function Panner(window, camera, distance) {
      this.window = window;
      this.camera = camera;
      this.enabled = true;
      this.distance = distance || 2;
      this.minDistance = distance / 2 || 0.3;
      this.maxDistance = distance * 2 || 5;
      this.clickPos = new Vec2(0, 0);
      this.dragDiff = new Vec2(0, 0);
      this.panScale = 0.01;
      this.upAxis = new Vec3(0, 0, 0);
      this.forwardAxis = new Vec3(0, 0, 0);
      this.rightAxis = new Vec3(0, 0, 0);
      this.cameraClickPos = new Vec3(0, 0, 0);
      this.cameraClickTarget = new Vec3(0, 0, 0);
      this.addEventHanlders();
    }

    Panner.prototype.addEventHanlders = function() {
      var _this = this;

      this.window.on('leftMouseDown', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        return _this.down(e.x, _this.window.height - e.y);
      });
      this.window.on('mouseDragged', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        return _this.drag(e.x, _this.window.height - e.y);
      });
      return this.window.on('scrollWheel', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        if (!_this.allowZooming) {
          return;
        }
        _this.distance = Math.min(_this.maxDistance, Math.max(_this.distance + e.dy / 100 * (_this.maxDistance - _this.minDistance), _this.minDistance));
        return _this.updateCamera();
      });
    };

    Panner.prototype.down = function(x, y) {
      this.clickPos.set(x, y);
      this.cameraClickPos.setVec3(this.camera.getPosition());
      return this.cameraClickTarget.setVec3(this.camera.getTarget());
    };

    Panner.prototype.drag = function(x, y) {
      this.dragDiff.set(x - this.clickPos.x, this.clickPos.y - y);
      return this.updateCamera();
    };

    Panner.prototype.updateCamera = function() {
      this.upAxis.setVec3(this.camera.getUp());
      this.forwardAxis.asSub(this.camera.getTarget(), this.camera.getPosition()).normalize();
      this.rightAxis.asCross(this.upAxis, this.forwardAxis).normalize();
      this.rightAxis.scale(this.dragDiff.x * this.panScale);
      this.upAxis.scale(this.dragDiff.y * this.panScale);
      console.log(this.upAxis, this.rightAxis);
      this.camera.getPosition().setVec3(this.cameraClickPos).add(this.rightAxis).add(this.upAxis);
      this.camera.getTarget().setVec3(this.cameraClickTarget).add(this.rightAxis).add(this.upAxis);
      return this.camera.updateMatrices();
    };

    return Panner;

  })();
});
