// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Panner, Time, Vec2, Vec3, _ref;

  _ref = require('pex/geom'), Vec2 = _ref.Vec2, Vec3 = _ref.Vec3;
  Time = require('pex/utils').Time;
  return Panner = (function() {
    function Panner(window, camera, distance) {
      this.window = window;
      this.camera = camera;
      this.enabled = true;
      this.allowZooming = true;
      this.distance = distance || 2;
      this.minDistance = distance * 0.1 || 0.1;
      this.maxDistance = distance * 2 || 5;
      this.clickPos = new Vec2(0, 0);
      this.dragDiff = new Vec2(0, 0);
      this.panScale = 0.01;
      this.upAxis = new Vec3(0, 0, 0);
      this.forwardAxis = new Vec3(0, 0, 0);
      this.rightAxis = new Vec3(0, 0, 0);
      this.cameraClickPos = new Vec3(0, 0, 0);
      this.cameraClickTarget = new Vec3(0, 0, 0);
      this.dragCenter = new Vec3();
      this.dragStart = new Vec3();
      this.dragDelta = new Vec3();
      this.dragScale = new Vec3();
      this.dragStartRotationAngle = 0;
      this.addEventHanlders();
    }

    Panner.prototype.addEventHanlders = function() {
      var _this = this;

      this.window.on('leftMouseDown', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        return _this.down(e.x, _this.window.height - e.y, e);
      });
      this.window.on('mouseDragged', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        return _this.drag(e.x, _this.window.height - e.y, e);
      });
      return this.window.on('scrollWheel', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        if (!_this.allowZooming) {
          return;
        }
        _this.distance = Math.min(_this.maxDistance, Math.max(_this.distance + e.dy / 100 * (_this.maxDistance - _this.minDistance), _this.minDistance));
        return _this.updateCamera();
      });
    };

    Panner.prototype.down = function(x, y, e) {
      var hits, ray;

      this.dragCenter.setVec3(this.camera.getTarget());
      ray = this.camera.getWorldRay(e.x, e.y, this.window.width, this.window.height);
      this.up = Vec3.create().asSub(this.camera.getPosition(), this.camera.getTarget()).normalize();
      hits = ray.hitTestPlane(this.dragCenter, this.up);
      this.dragStart.setVec3(hits[0]);
      return this.dragDelta.asSub(hits[0], this.dragCenter);
    };

    Panner.prototype.drag = function(x, y, e) {
      var diff, hits, ray;

      ray = this.camera.getWorldRay(e.x, e.y, this.window.width, this.window.height);
      hits = ray.hitTestPlane(this.dragCenter, this.up);
      if (!e.shift && !e.option) {
        diff = Vec3.create().asSub(this.dragStart, hits[0]);
        this.camera.getTarget().setVec3(this.dragCenter).add(diff);
        this.updateCamera();
        return this.dragCenter.setVec3(this.camera.getTarget());
      }
    };

    Panner.prototype.updateCamera = function() {
      if (!this.up) {
        this.up = Vec3.create().asSub(this.camera.getPosition(), this.camera.getTarget()).normalize();
      }
      this.camera.getPosition().setVec3(this.up).scale(this.distance).add(this.camera.getTarget());
      return this.camera.updateMatrices();
    };

    return Panner;

  })();
});
